generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  organizations Organization[]
  sessions      Session[]
  owners        Workspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Priority {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String
  created     DateTime  @default(now()) @db.Date
  Request     Request[]
}

model Status {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String
  created     DateTime @default(now()) @db.Date
}

model Request {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  description String
  created     DateTime  @default(now()) @db.Date
  priorityId  String    @db.Uuid
  priority    Priority? @relation(fields: [priorityId], references: [id], onDelete: Cascade)
}

model Account_Type {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String
}

model Organization {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String   @unique
  created_date DateTime @default(now()) @db.Date
  creatorId    String   @db.Uuid
  creator      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Workspace {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ownerId     String   @db.Uuid
  name        String
  createdDate DateTime @default(now()) @db.Date
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}
